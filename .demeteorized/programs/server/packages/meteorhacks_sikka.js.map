{"version":3,"sources":["meteorhacks:sikka/lib/server/init.js","meteorhacks:sikka/lib/server/config.js","meteorhacks:sikka/lib/server/core.js","meteorhacks:sikka/lib/server/session_hooks.js","meteorhacks:sikka/lib/server/routes.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;AAAA,W;;;;;;;;;;;;;;;;;;ACAA,oE;AACA,gC;AACA,c;AACA,kB;AACA,G;;AAEA,uB;AACA,6C;AACA,gC;AACA,iC;AACA,iB;AACA,2B;AACA,O;AACA,O;;AAEA,e;AACA,mB;AACA,K;AACA,G;;AAEA,sB;AACA,E;;AAEA,Y;AACA,kB;AACA,2H;AACA,sH;AACA,E;;AAEA,wF;AACA,qB;AACA,oB;AACA,iG;AACA,qG;AACA,E;;AAEA,gB;AACA,qG;AACA,iH;AACA,E;;AAEA,+F;;AAEA,kF;;;;;;;;;;;;;;;;;;AC3CA,kC;AACA,e;AACA,c;AACA,mB;AACA,gB;AACA,I;;AAEA,e;AACA,E;;AAEA,iB;;AAEA,sB;AACA,wB;;AAEA,wD;AACA,iD;AACA,qB;AACA,8C;AACA,mB;AACA,U;AACA,yB;AACA,G;AACA,E;;AAEA,uE;AACA,4C;AACA,wD;AACA,uD;;AAEA,8B;AACA,0C;AACA,yC;;AAEA,sB;AACA,gE;AACA,0C;AACA,mD;AACA,mB;AACA,G;;AAEA,uC;AACA,qD;AACA,qE;AACA,sD;AACA,qC;AACA,qB;AACA,Y;AACA,sB;AACA,K;AACA,mC;AACA,mB;AACA,G;;AAEA,iB;AACA,E;;AAEA,oD;AACA,wC;AACA,c;AACA,iB;AACA,G;;AAEA,2D;AACA,wB;AACA,iB;AACA,G;;AAEA,0C;AACA,yB;AACA,C;;AAEA,0C;AACA,+B;AACA,4B;AACA,uC;AACA,G;;AAEA,gD;AACA,gC;AACA,a;AACA,E;;AAEA,iC;AACA,gC;AACA,E;;AAEA,8C;AACA,iC;AACA,4C;AACA,G;;AAEA,oC;AACA,qD;AACA,qC;AACA,a;AACA,E;;AAEA,sC;AACA,iC;AACA,4C;AACA,G;;AAEA,mC;AACA,E;;AAEA,4C;AACA,0C;AACA,E;;AAEA,uD;AACA,wC;AACA,0B;AACA,2B;AACA,G;;AAEA,+B;AACA,8B;AACA,4B;AACA,c;AACA,M;;AAEA,2B;AACA,oC;AACA,oB;AACA,G;AACA,E;;AAEA,6C;AACA,qB;AACA,wC;AACA,E;;AAEA,sC;AACA,mD;AACA,kC;AACA,U;AACA,gB;AACA,G;AACA,E;;;;;;;;;;;;;;;;;;AC3IA,6C;AACA,kC;;AAEA,yD;AACA,4D;AACA,kB;AACA,wE;AACA,mE;AACA,8B;AACA,e;AACA,oC;AACA,K;;AAEA,0B;AACA,mD;AACA,2C;AACA,W;AACA,G;;AAEA,0B;AACA,yE;AACA,e;AACA,iE;AACA,sB;AACA,8C;AACA,iB;AACA,qB;AACA,qC;AACA,qB;AACA,kB;AACA,S;;AAEA,gC;AACA,8B;AACA,qE;AACA,uE;AACA,6C;AACA,a;AACA,W;AACA,G;;AAEA,yC;AACA,C;;;;;;;;;;;;;;;;;;AC1CA,yE;AACA,qD;AACA,wC;AACA,qC;AACA,qC;;AAEA,kB;AACA,oC;AACA,gD;AACA,sB;AACA,+D;AACA,sC;AACA,oD;;AAEA,uC;AACA,kB;AACA,G;;AAEA,yC;AACA,kB;AACA,G;;AAEA,gD;AACA,6C;AACA,4B;AACA,kD;AACA,G;;AAEA,6B;AACA,kB;AACA,G;;AAEA,yC;AACA,E;;AAEA,uC;AACA,qD;AACA,yC;AACA,E;;AAEA,mE;AACA,+C;AACA,oB;AACA,2C;AACA,wB;AACA,I;AACA,8C;AACA,sB;AACA,c;AACA,E;;AAEA,mE;AACA,0C;AACA,+D;AACA,oD;;AAEA,mE;AACA,e;AACA,oC;AACA,8B;AACA,K;AACA,mB;;AAEA,uC;AACA,a;AACA,wE;AACA,yB;AACA,sD;AACA,K;;AAEA,oC;;AAEA,0B;AACA,iD;AACA,0B;AACA,+B;AACA,S;AACA,gB;AACA,Y;AACA,oE;AACA,yB;AACA,6C;AACA,K;AACA,G;AACA,E;;AAEA,2E;AACA,sC;AACA,0B;AACA,uD;AACA,yD;AACA,6D;AACA,E;;AAEA,a;AACA,sD;AACA,uE","file":"/packages/meteorhacks_sikka.js","sourcesContent":["Sikka = {};","Sikka._getConfig = function (key, meteorSettingsKey, defaultValue) {\n  var envVar = process.env[key];\n  if(envVar) {\n    return envVar;\n  }\n\n  if(Meteor.settings) {\n    var parts = meteorSettingsKey.split('.');\n    var value = Meteor.settings;\n    parts.forEach(function(key) {\n      if(value) {\n        value = value[key];\n      }\n    });\n\n    if(value) {\n      return value;\n    }\n  }\n\n  return defaultValue;\n};\n\nConfig = {};\nConfig.captcha = {\n  siteKey: Sikka._getConfig(\"SIKKA_CAPTCHA_SITE_KEY\", \"sikka.captcha.siteKey\", \"6LdkcgMTAAAAAJosMQhYSfKeFldhn644i9w9c4Oi\"),\n  secret: Sikka._getConfig(\"SIKKA_CAPTCHA_SECRET\", \"sikka.captcha.secret\", \"6LdkcgMTAAAAADftIWaISsvQ7SqIeLqHM3PWu79Q\")\n};\n\nvar perIpLimit = Sikka._getConfig(\"SIKKA_PER_IP_MAX_RPS\", \"sikka.rateLimits.perIp\", 20);\nConfig.rateLimits = {\n  perIp: perIpLimit,\n  perHuman: Sikka._getConfig(\"SIKKA_PER_HUMAN_MAX_RPS\", \"sikka.rateLimits.perHuman\", perIpLimit),\n  perSession: Sikka._getConfig(\"SIKKA_PER_HUMAN_MAX_RPS\", \"sikka.rateLimits.perSession\", perIpLimit),\n};\n\nConfig.times = {\n  blockIpFor: Sikka._getConfig(\"SIKKA_BLOCK_IP_FOR_MILLIS\", \"sikka.times.blockIpFor\", 1000 * 60 * 2),\n  humanLivesUpto: Sikka._getConfig(\"SIKKA_HUMAN_LIVES_UPTO_MILLIS\", \"sikka.times.humanLivesUpto\", 1000 * 60 * 60)\n};\n\nConfig.onlyForHumans = Sikka._getConfig('SIKKA_ONLY_FOR_HUMANS', 'sikka.onlyForHumans', false);\n\nconsole.log(\"Sikka: starting with these configurations:\", JSON.stringify(Config));","Sikka._rebuildStats = function() {\n  var stats = {\n    perIp: {},\n    perSession: {},\n    perHuman: {}\n  };\n\n  return stats;\n};\n\nSikka.stats = {};\n\nSikka._blackList = {};\nSikka._humanTokens = {};\n\nSikka._getIp = function _getIp(headers, remoteAddress) {\n  var xForwardedFor = headers['x-forwarded-for'];\n  if(xForwardedFor) {\n    var firstIp = xForwardedFor.split(\",\")[0];\n    return firstIp;\n  } else {\n    return remoteAddress;\n  }\n};\n\nSikka._updateStats = function _updateStats(ip, sessionId, humanToken) {\n  Sikka._ensureStats('perIp', ip, 1000 * 5);\n  Sikka._ensureStats('perSession', sessionId, 1000 * 5);\n  Sikka._ensureStats('perHuman', humanToken, 1000 * 5);\n\n  Sikka._incStat('perIp', ip);\n  Sikka._incStat('perSession', sessionId);\n  Sikka._incStat('perHuman', humanToken);\n\n  var blocked = false;\n  if(Sikka._rateExceeds(\"perIp\", ip, Config.rateLimits.perIp)) {\n    console.log(\"Sikka: IP Blocked.\", ip);\n    Sikka._blockIpFor(ip, Config.times.blockIpFor);\n    blocked = true;\n  }\n\n  if(Sikka._isValidHuman(humanToken)) {\n    var perHumanMaxRate = Config.rateLimits.perHuman;\n    if(Sikka._rateExceeds(\"perHuman\", humanToken, perHumanMaxRate)) {\n      console.log(\"Sikka: Human Blocked\", humanToken);\n      Sikka._deleteHuman(humanToken);\n      blocked = true;\n    } else {\n      blocked = false;\n    }\n  } else if(Config.onlyForHumans) {\n    blocked = true;\n  }\n\n  return blocked;\n};\n\nSikka._rateExceeds = function(type, key, maxValue) {\n  var stats = Sikka._getStat(type, key);\n  if(!stats) {\n    return false;\n  }\n\n  var timeDiffSecs = (Date.now() - stats.startedAt) / 1000;\n  if(timeDiffSecs < 1) {\n    return false;\n  }\n\n  var rate = (stats.count) / timeDiffSecs;\n  return rate > maxValue;\n}\n\nSikka._blockIpFor = function(ip, millis) {\n  millis = millis || 1000 * 60;\n  if(Sikka._blackList[ip]) {\n    clearTimeout(Sikka._blackList[ip]);\n  }\n\n  Sikka._blackList[ip] = setTimeout(function() {\n    delete Sikka._blackList[ip];\n  }, millis);\n};\n\nSikka._isBlocked = function(ip) {\n  return !!Sikka._blackList[ip];\n};\n\nSikka._addHumanFor = function(token, millis) {\n  if(Sikka._humanTokens[token]) {\n    clearTimeout(Sikka._humanTokens[token]);\n  }\n\n  millis = millis || 1000 * 60 * 60;\n  Sikka._humanTokens[token] = setTimeout(function() {\n    delete Sikka._humanTokens[token];\n  }, millis);\n};\n\nSikka._deleteHuman = function(token) {\n  if(Sikka._humanTokens[token]) {\n    clearTimeout(Sikka._humanTokens[token]);\n  }\n\n  delete Sikka._humanTokens[token];\n};\n\nSikka._isValidHuman = function(humanToken) {\n  return !!Sikka._humanTokens[humanToken];\n};\n\nSikka._ensureStats = function(type, key, resetMillis) {\n  resetMillis = resetMillis || 1000 * 5;\n  if(!Sikka.stats[type]) {\n    Sikka.stats[type] = {};\n  }\n\n  if(!Sikka.stats[type][key]) {\n    Sikka.stats[type][key] = {\n      startedAt: Date.now(),\n      count: 0\n    };\n\n    setTimeout(function() {\n      delete Sikka.stats[type][key];\n    }, resetMillis);\n  }\n};\n\nSikka._incStat = function(type, key, value) {\n  value = value || 1;\n  Sikka.stats[type][key].count += value;\n};\n\nSikka._getStat = function(type, key) {\n  if(Sikka.stats[type] && Sikka.stats[type][key]) {\n    return Sikka.stats[type][key];\n  } else {\n    return null;\n  }\n};","var sessionProto = MeteorX.Session.prototype;\nvar Fiber = Npm.require('fibers');\n\nvar originalProcessMessage = sessionProto.processMessage;\nsessionProto.processMessage = function processMessage(msg) {\n  var self = this;\n  var ip = Sikka._getIp(self.socket.headers, self.socket.remoteAddress);\n  if(msg.msg === \"method\" && msg.method === \"setSikkaHumanToken\") {\n    var token = msg.params[0];\n    if(token) {\n      this._sikkaHumanToken = token;\n    }\n\n    // complete the method\n    self.send({msg: \"updated\", methods: [msg.id]});\n    self.send({msg: \"result\", id: msg.id});\n    return;\n  }\n\n  var sessionId = this.id;\n  var blocked = Sikka._updateStats(ip, sessionId, this._sikkaHumanToken);\n  if(blocked) {\n    console.info(\"Sikka: Closing current connection\", sessionId);\n    Fiber(function() {\n      // ask to reload the page or cordova app\n      self.send({\n        msg: \"added\",\n        collection: \"sikka-commands\",\n        id: \"reload\",\n        fields: {}\n      });\n\n      // Don't close the socket.\n      // Just ignore the load.\n      // If we try to close the socket, it'll try to reconnect again.\n      // That leads to a lot of requests and make the DOS attempt worst\n      self.socket.removeAllListeners('data');\n    }).run();\n    return;\n  }\n\n  originalProcessMessage.call(self, msg);\n}","var captchaPageTemplate = Assets.getText('lib/server/captcha_page.html');\nvar genCaptchaPage = _.template(captchaPageTemplate);\nvar urlParse = Npm.require(\"url\").parse;\nvar request = Npm.require(\"request\");\nvar Cookies = Npm.require(\"cookies\");\n\nSikka.routes = {};\nSikka.routes._validationMiddleware =\nfunction _validationMiddleware(req, res, next) {\n  // check for cookies\n  var ip = Sikka._getIp(req.headers, req.socket.remoteAddress);\n  var cookies = new Cookies(req, res);\n  var humanToken = cookies.get('sikka-human-token');\n\n  if(Sikka._isValidHuman(humanToken)) {\n    return next();\n  }\n\n  if(req.url.match(/\\/verify-captcha/)) {\n    return next();\n  }\n\n  // Now this request is not coming from a human\n  // And check if this app is only for humans\n  if(Config.onlyForHumans) {\n    return Sikka.routes._sendCaptchPage(req, res);\n  }\n\n  if(!Sikka._isBlocked(ip)) {\n    return next();\n  }\n\n  Sikka.routes._sendCaptchPage(req, res);\n};\n\nSikka.routes._verifyCaptchaMiddleware =\nfunction _verifyCaptchaMiddleware(params, req, res) {\n  Sikka.routes._processCaptcha(req, res);\n};\n\nSikka.routes._sendCaptchPage = function _sendCaptchPage(req, res) {\n  res.writeHead(200, {'Content-Type': 'html'});\n  var tmplValues = {\n    captchaSiteKey: Config.captcha.siteKey,\n    redirectUrl: req.url\n  };\n  var captchPage = genCaptchaPage(tmplValues);\n  res.end(captchPage);\n  return true;\n};\n\nSikka.routes._processCaptcha = function _processCaptcha(req, res) {\n  var parsedUrl = urlParse(req.url, true);\n  var captchResponse = parsedUrl.query['g-recaptcha-response'];\n  var redirectUrl = parsedUrl.query['redirect-url'];\n\n  request.post(\"https://www.google.com/recaptcha/api/siteverify\", {\n    formData: {\n      secret: Config.captcha.secret,\n      response: captchResponse\n    }\n  }, withResponse);\n\n  function withResponse(err, r, body) {\n    if(err) {\n      console.error(\"Sikka: Captcha verification error: \", err.message);\n      res.writeHead(500);\n      return res.end(\"Captcha verification errored!\");\n    }\n\n    var response = JSON.parse(body);\n\n    if(response.success) {\n      Sikka.routes._setSikkaHumanToken(req, res);\n      res.writeHead(301, {\n        \"Location\": redirectUrl\n      });\n      res.end();\n    } else {\n      console.error(\"Sikka: Captch verification failed!\", response);\n      res.writeHead(401);\n      res.end(\"Captch verification failed!\");\n    }\n  }\n};\n\nSikka.routes._setSikkaHumanToken = function _setSikkaHumanToken(req, res) {\n  var cookies = new Cookies(req, res);\n  var token = Random.id();\n  // We need to make the load balancing sticky for this\n  Sikka._addHumanFor(token, Config.times.humanLivesUpto);\n  cookies.set(\"sikka-human-token\", token, {httpOnly: false});\n};\n\n// Main Logic\nPicker.middleware(Sikka.routes._validationMiddleware);\nPicker.route('/verify-captcha', Sikka.routes._verifyCaptchaMiddleware);"]}