{"version":3,"file":"/packages/dfischer:prerenderio.js","sources":["dfischer:prerenderio/dfischer:prerenderio.js"],"names":[],"mappings":";;;;;;;;;;;;;AAAA,gC;;AAEA,iD;;AAEA,6G;AACA,qE;AACA,uE;AACA,C;;AAEA,+B;AACA,+C;;AAEA,yE;AACA,+B;AACA,0B;AACA,E;;;AAGA,2B;AACA,0D;;AAEA,+B;AACA,8C;AACA,M;;AAEA,kB;;AAEA,gC;AACA,6B;AACA,kB;AACA,M;;AAEA,wD;AACA,mC;AACA,sD;AACA,+B;AACA,oF;AACA,qE;AACA,mE;AACA,S;AACA,mC;AACA,c;AACA,gC;AACA,oC;AACA,S;AACA,O;AACA,kB;AACA,M;;AAEA,8B;AACA,mC;AACA,M;;AAEA,oC;AACA,uB;AACA,mB;AACA,c;AACA,yB;AACA,e;;AAEA,iB;AACA,yB;;AAEA,4B;AACA,mC;AACA,kD;AACA,mF;AACA,yF;AACA,yC;AACA,gB;AACA,yF;AACA,yC;AACA,+B;AACA,S;AACA,O;;AAEA,gE;AACA,gE;AACA,kE;AACA,wC;AACA,2B;AACA,S;;AAEA,0E;AACA,gC;AACA,yC;AACA,O;;AAEA,6B;AACA,oC;AACA,sB;AACA,0C;AACA,8B;AACA,W;AACA,gB;AACA,uB;AACA,sB;AACA,sB;AACA,+B;AACA,uB;AACA,8C;AACA,4C;AACA,+B;AACA,a;AACA,kB;AACA,oC;AACA,W;AACA,gB;AACA,O;;AAEA,+B;AACA,sC;AACA,0B;AACA,wC;;AAEA,uC;AACA,uC;AACA,4C;AACA,S;AACA,O;;AAEA,gC;AACA,gC;AACA,sC;AACA,oE;AACA,8C;AACA,+B;AACA,S;;AAEA,2B;AACA,wC;AACA,O;;AAEA,qB;AACA,yC;;AAEA,kB;AACA,2C;;AAEA,iC;AACA,6D;AACA,0C;AACA,4C;AACA,+C;AACA,mB;AACA,O;;AAEA,2B;AACA,mB;AACA,mB;AACA,O;;AAEA,gB;AACA,gC;;AAEA,kB;AACA,M;;AAEA,yC;AACA,K;AACA,G","sourcesContent":["// Write your package code here!\n\nthis.prerenderio = Npm.require('prerender-node');\n\nif(typeof(Meteor.settings.PrerenderIO)==\"object\" && typeof(Meteor.settings.PrerenderIO.token)!=\"undefined\") {\n  console.info('Prerender Token:',Meteor.settings.PrerenderIO.token);\n  prerenderio.set('prerenderToken', Meteor.settings.PrerenderIO.token);\n}\n\nvar send = Npm.require('send');\nvar deprecate = Npm.require('depd')('express');\n\n// adding in Npm.require('depd'); seems to be troublesome at this point..\nvar deprecate = function(msg) {\n  return console.log(msg);\n};\n\n\nMeteor.startup(function() {\n  WebApp.rawConnectHandlers.use(function(req, res, next) {\n\n    req.get = function(param) {\n      return req.headers[param.toLowerCase()];\n    };\n\n    res.req = req;\n\n    res.status = function(code){\n      this.statusCode = code;\n      return this;\n    };\n\n    res.set = res.header = function header(field, val) {\n      if (arguments.length === 2) {\n        if (Array.isArray(val)) val = val.map(String);\n        else val = String(val);\n        if ('content-type' == field.toLowerCase() && !/;\\s*charset\\s*=/.test(val)) {\n          var charset = send.mime.charsets.lookup(val.split(';')[0]);\n          if (charset) val += '; charset=' + charset.toLowerCase();\n        }\n        this.setHeader(field, val);\n      } else {\n        for (var key in field) {\n          this.set(key, field[key]);\n        }\n      }\n      return this;\n    };\n\n    res.get = function(field){\n      return this.getHeader(field);\n    };\n\n    res.send = function send(body) {\n      var chunk = body;\n      var encoding;\n      var len;\n      var req = this.req;\n      var type;\n\n      // settings\n      var app = this.app;\n\n      // allow status / body\n      if (arguments.length === 2) {\n        // res.send(body, status) backwards compat\n        if (typeof arguments[0] !== 'number' && typeof arguments[1] === 'number') {\n          deprecate('res.send(body, status): Use res.status(status).send(body) instead');\n          this.statusCode = arguments[1];\n        } else {\n          deprecate('res.send(status, body): Use res.status(status).send(body) instead');\n          this.statusCode = arguments[0];\n          chunk = arguments[1];\n        }\n      }\n\n      // disambiguate res.send(status) and res.send(status, num)\n      if (typeof chunk === 'number' && arguments.length === 1) {\n        // res.send(status) will set status message as text string\n        if (!this.get('Content-Type')) {\n          this.type('txt');\n        }\n\n        deprecate('res.send(status): Use res.sendStatus(status) instead');\n        this.statusCode = chunk;\n        chunk = http.STATUS_CODES[chunk];\n      }\n\n      switch (typeof chunk) {\n        // string defaulting to html\n        case 'string':\n          if (!this.get('Content-Type')) {\n            this.type('html');\n          }\n          break;\n        case 'boolean':\n        case 'number':\n        case 'object':\n          if (chunk === null) {\n            chunk = '';\n          } else if (Buffer.isBuffer(chunk)) {\n            if (!this.get('Content-Type')) {\n              this.type('bin');\n            }\n          } else {\n            return this.json(chunk);\n          }\n          break;\n      }\n\n      // write strings in utf-8\n      if (typeof chunk === 'string') {\n        encoding = 'utf8';\n        type = this.get('Content-Type');\n\n        // reflect this in content-type\n        if (typeof type === 'string') {\n          this.set('Content-Type', 'utf-8');\n        }\n      }\n\n      // populate Content-Length\n      if (chunk !== undefined) {\n        if (!Buffer.isBuffer(chunk)) {\n          // convert chunk to Buffer; saves later double conversions\n          chunk = new Buffer(chunk, encoding);\n          encoding = undefined;\n        }\n\n        len = chunk.length;\n        this.set('Content-Length', len);\n      }\n\n      // method check\n      var isHead = req.method === 'HEAD';\n\n      // freshness\n      if (req.fresh) this.statusCode = 304;\n\n      // strip irrelevant headers\n      if (204 == this.statusCode || 304 == this.statusCode) {\n        this.removeHeader('Content-Type');\n        this.removeHeader('Content-Length');\n        this.removeHeader('Transfer-Encoding');\n        chunk = '';\n      }\n\n      // skip body for HEAD\n      if (isHead) {\n        this.end();\n      }\n\n      // respond\n      this.end(chunk, encoding);\n\n      return this;\n    };\n\n      return prerenderio(req, res, next);\n  });\n});\n"]}